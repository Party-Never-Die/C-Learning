.Net基础班第五天(流程控制)


//1.*程序调试 
 写完一段程序后,想看一下这段程序的执行过程。 
 当你写完这段程序后,发现,程序并没有按照你想象的样子去执行。
 调试方法:
 1)、F11逐语句调试(单步调试) 
 2)、F10逐过程调试 
 3)、断点调试


//2.for循环 
 语法:
 for(表达式1;表达式2;表达式3) 
 { 
 循环体; 
 } 
 表达式1一般为声明循环变量,记录循环的次数(int i=0;) 
 表达式2一般为循环条件(i<10) 
 表达式3一般为改变循环条件的代码,使循环条件终有一天不再成立(i++)。 
 执行过程:程序首先执行表达式1,声明了一个循环变量用来记录循环的次数, 
 然后执行表达式2,判断循环条件是否成立,如果表达式2返回的结果为true, 则执行循环体。
 当执行完循环体后,执行表达式。
 然后执行表达式2继续判断循环条件是否成立, 
 如果成立则继续执行循环体,如果不成立,则跳出for循环。
 //举例for+Tab+Tab就会出现for循环的框架

 for (int i = 0; i < length; i++)
 {

 } 

 //举例forr+Tab+Tab就会出现逆向for循环的框架
 for (int i = length - 1; i >= 0; i--)
 {

 }


//3.int.TryParse、int.parse 
 //int.parse和Convert.ToInt32(str)的效果完全相同,
 //因为后者内部调用了前者
 int i = int.parse("123");


 //int.TryParse这个方法是尝试将字符串转化为数字,成功了则将b改为true,
 //将字符串转化后的结果给number;失败了则将b=false,number等于0,
 //失败的结果和number本来的值没有关系
 int number = 0;
 bool b = int.TryParse("123abc",out number);


//4.三元表达式 
 语法:
 表达式1?表达式2:表达式3; 
 表达式1一般为一个关系表达式。 
 如果表达式1的值为true,那么表达式2的值就是整个三元表达式的值。 
 如果表达式1的值为false,那么表达式3的值就是整个三元表达式的值。 
 注意:
 表达式2的结果类型必须跟表达式3的结果类型一致,
 并且也要跟整个三元表达式的结果类型一致。


//5.随机数
 //产生1、2、3、4、5、6、7、8、9的随机数
 Random r = new Random();
 int rNumber = r.Next(1,10);//
