.Net基础班第三天（运算符） 


//1.Convert类型转换
 类型如果相兼容的两个变量,可以使用自动类型转换或者强制类型转换,
 但是,如果两个类型的变量不兼容,比如 string与int或者string 与double,
 这个时候我们可以使用一个叫做Convert的转换工厂进行转换。
 注意:使用Convert进行类型转换,也需要满足一个条件: 面儿上必须要过的去.
//举例
 string str = "123";
 int i = Convert.ToInt32(str);//将string转换为int
 double d = Convert.ToDouble(str);//将string转换为double
//通过占位符保留两位小数
 double d = 10 * 1.0 / 3;
 Console.WriteLine("{0:0.00}",d);


//2.算数运算符(++和--)
 ++:分为前++和后++,不管是前++还是后++,最终的结果都是给这个变量加一。 
 区别表现表达式当中,如果是前++,则先给这个变量自身加一,然后带着这个加一后的值去参与运算。 
 如果是后++,则先拿原值参与运算,运算完成后,再讲这个变量自身加一。
 --:同上。


//3.几元运算符
 对于向加加或者减减这样只需要一个操作数就能完成的运算,我们称之为一元运算符。
 + - * / % 对于这些需要两个或以上才能完成运算的操作符,我们称之为二元运算符。
 一元运算符的优先级要高于而元运算符。
 如果在一个表达式当中,既有一元运算符,又有二元运算符,我们首先计算一元运算符。


//4.关系运算符
 	>	<	>= 	<= 	== 	!= 
 关系运算符是用来描述两个事物之间的关系,由关系运算符连接的表达式称之为关系表达式。


//5.bool类型
 在c#中我们用bool类型来描述对或者错。 
 bool类型的值只有两个 一个true 一个false


//6.逻辑运算符
 &&    //逻辑与
 ||    //逻辑或 
 !     //逻辑非 
 由逻辑运算符连接的表达式叫做逻辑表达式
 逻辑运算符两边放的一般都是关系表达式或者bool类型的值。
 逻辑表达式的结果同样也是bool类型


//7.复合赋值运算符 
 int number=10; 
 += : number+=20; number=number+20; 
 -= : number-=5;  number=number-5; 
 *= : number*=5;  number=number*5; 
 /= : number/=5;  number=number/5; 


//8.顺序结构、分支结构、循环结构
 顺序结构:程序从Main函数进入,从上到下一行一行的执行,不会落下任何一行。 
 分支结构:if if-else 选择结构:if else-if switch-case 
 循环结构:while do-while for foreach


// 9.if语句 
 语法: if(判断条件) { 要执行的代码; } 
 判断条件:一般为关系表达式或者bool类型的值。 
 执行过程:程序运行到if处,首先判断if所带的小括号中的判断条件, 
 如果条件成立,也就是返回true,则执行if所带的大括号中的代码, 
 如果判断条件不成立,也就是返回一个false。则跳过if结构,继续向下执行。
 if结构的特点:先判断,再执行,有可能一行代码都不执行 用于一种情况的判断。


//10.if-else 
 语法: if(判断条件) { 执行的代码; } else { 执行的代码 } 
 执行过程:程序执行到if处,首先判断if所带的小括号中的判断条件是否成立, 
 如果成立,也就是返回一个true,则执行if所带的大括号中的代码, 执行完成后,跳出if-else结构。 
 如果if所带的小括号中的判断条件不成立,也就是返回一个false, 
 则跳过if语句,执行else所带的大括号中的语句,执行完成后,跳出if-else结构。
 if-else特点:先判断,再执行,最少都要执行一条代码。 用于两种情况的判断
 //注意:else永远跟离它最近的那个if配对


//11.if else-if 
 作用:用来处理多条件的区间性的判断。 
 语法: if(判断条件) { 要执行的代码; } 
 else if(判断条件) { 要执行的代码; } 
 else if(判断条件) { 要执行的代码; } 
 else if(判断条件) { 要执行的代码; } 
 ........ else { 要执行的代码; } 
 执行过程；程序首先判断第一个if所带的小括号中的判断条件,
 如果条件成立,也就是返回一个true, 
 则执行该if所带的大括号中的代码,执行完成后,立即跳出if else-if结构。
如果第一个if所带的判断条件不成立,也就是返回一个false,则继续向下进行判断,
依次的判断每一个if所带 的判断条件,如果成立,
就执行该if所带的大括号中的代码,如果不成立,则继续向下判断,
如果每个if所带的判断条件都不成立,就看当前这个if else-if结构中是否存在else。
如果有else的话,则执行else中所带的代码,如果没有else,
则整个 if-else if神马都不做。 else可以省略。


//12.Null 条件运算符 ?. 和?[]
 Null条件运算符在C#6及更高版本中可用,
 仅当操作数的计算结果为非null时,
 null条件运算符才会将成员访问或元素访问运算应用其操作数；否则,将返回null。
 即:
 如果a的计算结果为null,则a?.x或a?[]的结果为null
 如果a的计算结果为非null,则a?.x或a?[]的结果将分别与a.x或a[]的结果相同


//13.?? 和 ??=运算符
 如果左操作数的值不为null,则null合并运算符??返回该值；否则,它会计算右操作数并返回其结果。如果左操作数的计算结果为非null,则??运算符不会计算其右操作数。
 C#8.0及更高版本中可使用空合并运算符??=,该运算符仅在左侧操作数的求值结果为null时,才将其右侧操作数的值赋值给左操作数,如果左操作数的计算结果为非null,则??=运算符不会计算其右操作数。

